/*
 * Copyright (c) 2021 @MangoIV
 *
 * SPDX-License-Identifier: MIT
 */

#define ZMK_MOUSE_DEFAULT_SCRL_VAL 35 // 10
#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

&msc {
    acceleration-exponent = <0>;      // 0
    time-to-max-speed-ms = <0>;       // 300
    delay-ms = <0>;                   // 0
};


&mmv {
    time-to-max-speed-ms = <400>;
    acceleration-exponent = <1>;
};

// makes it possible to hold backspace

&lt { quick_tap_ms = <200>; };

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        left_bkt {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <2 3>;
            timeout-ms = <50>;
        };

        right_bkt {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <7 6>;
            timeout-ms = <50>;
        };

        left_par {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <12 13>;
            timeout-ms = <50>;
        };

        right_par {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <16 17>;
            timeout-ms = <50>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <22 23>;
            timeout-ms = <50>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <26 27>;
            timeout-ms = <50>;
        };

        bac {
            bindings = <&kp BACKSLASH>;
            key-positions = <24 25>;
            timeout-ms = <50>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <14 15>;
            timeout-ms = <50>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <11 12>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <18 17>;
        };
    };

    macros {
        dongle_bootload_macro: bootload_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bootloader>;
            label = "BOOTLOAD_MACRO";
        };
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
            flavor = "tap-preferred";
        };

        ltq: ltq {
            compatible = "zmk,behavior-hold-tap";
            label = "LTQ";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
        };

        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <135>;
            quick-tap-ms = <0>;
        };

        scroll_encoder: scroll_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;
            tap-ms = <30>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Qwery {
            label = "Qwerty";
            bindings = <
&kp Q           &kp W           &kp E             &kp R             &kp T       &kp Y      &kp U              &kp I                &kp O                    &kp P
&hm LEFT_GUI A  &hm LEFT_ALT S  &hm LCTRL D       &hm LEFT_SHIFT F  &kp G       &kp H      &hm RIGHT_SHIFT J  &hm RCTRL K          &hm RIGHT_ALT L          &as COLON SEMICOLON
&kp Z           &kp X           &kp C             &kp V             &kp B       &kp N      &kp M              &as LESS_THAN COMMA  &as GREATER_THAN PERIOD  &as QUESTION SLASH
                                &ltq 1 BACKSPACE                    &ltq 3 TAB  &kp ENTER  &ltq 3 ENTER                            &ltq 2 SPACE
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        Navi {
            bindings = <
&trans  &msc SCRL_UP    &mmv MOVE_UP    &msc SCRL_DOWN   &kp HOME        &trans  &trans     &kp UP_ARROW    &trans           &trans
&trans  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &kp LEFT_SHIFT  &trans  &kp LEFT   &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans
&trans  &trans          &trans          &trans           &kp END         &trans  &trans     &trans          &trans           &trans
                        &trans                           &trans          &trans  &mkp RCLK                  &mkp LCLK
            >;

            label = "Navi";
            sensor-bindings = <&inc_dec_kp RIGHT_ARROW LEFT_ARROW>;
        };

        Symbol {
            bindings = <
&kp EXCLAMATION  &kp AT_SIGN   &kp HASH  &kp DOLLAR  &kp PERCENT  &kp CARET  &kp AMPERSAND    &kp ASTERISK                    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp ESCAPE       &kp CAPSLOCK  &kp HOME  &kp END     &kp UNDER    &kp MINUS  &kp RIGHT_SHIFT  &trans                          &trans                &as DOUBLE_QUOTES SQT
&kp BACKSPACE    &trans        &trans    &trans      &kp TILDE    &kp GRAVE  &as PLUS EQUAL   &as DOUBLE_QUOTES SINGLE_QUOTE  &as PIPE BACKSLASH    &kp DELETE
                               &trans                &trans       &trans     &trans                                           &trans
            >;

            label = "Symbol";
            sensor-bindings = <&scroll_encoder>;
        };

        Num {
            bindings = <
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5      &kp NUMBER_6       &kp NUMBER_7     &kp NUMBER_8       &kp NUMBER_9   &kp NUMBER_0
&kp LG(A)     &kp LG(S)     &kp LG(D)     &kp LG(F)     &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp RIGHT_SHIFT  &kp RIGHT_CONTROL  &kp RIGHT_ALT  &kp RIGHT_GUI
&kp LG(Z)     &kp LG(X)     &kp LG(C)     &kp LG(V)     &kp LEFT_BRACE    &kp RIGHT_BRACE    &kp F1           &kp F2             &kp F3         &kp F4
                            &trans                      &trans            &none              &trans                              &trans
            >;

            label = "Num";
            sensor-bindings = <&scroll_encoder>;
        };

        Flash {
            bindings = <
&dongle_bootload_macro  &trans          &kp UP_ARROW    &trans           &trans             &bt BT_SEL 0          &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans                  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp C_VOLUME_UP    &kp C_BRIGHTNESS_INC  &trans        &trans        &trans        &trans
&trans                  &out OUT_TOG    &trans          &trans           &kp C_VOLUME_DOWN  &kp C_BRIGHTNESS_DEC  &trans        &trans        &trans        &bt BT_CLR
                                        &trans                           &trans             &none                 &trans                      &trans
            >;

            label = "Flash";
            sensor-bindings = <&scroll_encoder>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        flash {
            if-layers = <2 3>;
            then-layer = <4>;
        };
    };
};
